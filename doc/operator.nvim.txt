*operator.nvim.txt*          For NVIM v0.8.0         Last change: 2025 July 28

==============================================================================
Table of Contents                            *operator.nvim-table-of-contents*

1. operator.nvim                                 |operator.nvim-operator.nvim|
  - Features                            |operator.nvim-operator.nvim-features|
  - Installation                    |operator.nvim-operator.nvim-installation|
  - Usage                                  |operator.nvim-operator.nvim-usage|
  - API                                      |operator.nvim-operator.nvim-api|
  - License                              |operator.nvim-operator.nvim-license|

==============================================================================
1. operator.nvim                                 *operator.nvim-operator.nvim*

A Neovim plugin that provides utilities for creating custom operator functions.


FEATURES                                *operator.nvim-operator.nvim-features*

- Easily create custom operator functions
- Support for different selection modes (character-wise, line-wise, block-wise)
- Utilities for handling text regions and selections


INSTALLATION                        *operator.nvim-operator.nvim-installation*


USING PACKER ~

>lua
    use "ClarityWay/operator.nvim"
<


USING LAZY.NVIM ~

>lua
    { "ClarityWay/operator.nvim" }
<


USAGE                                      *operator.nvim-operator.nvim-usage*


BASIC EXAMPLE ~

Create a custom operator by wrapping your function with `operator.wrap`:

>lua
    local operator = require("operator")
    
    -- Example: Custom operator to uppercase selected text
    local function uppercase_text(texts, _)
      return vim.tbl_map(string.upper, texts)
    end
    
    vim.keymap.set("n", "gU", operator.wrap(uppercase_text))
<

Now you can use `gU` followed by a motion (e.g., `gUw` to uppercase a word,
`gUap` to uppercase a paragraph).


LINE-WISE OPERATORS ~

For line-wise operations, pass `true` as the second argument to
`operator.wrap`:

>lua
    vim.keymap.set("n", "gU", operator.wrap(uppercase_text, true))
<


API                                          *operator.nvim-operator.nvim-api*


OPERATOR.WRAP(FUNC, LINEWISE) ~

Wraps a function to create an operator function that can be mapped.

- `func`: The function to wrap. It receives `texts` (selected text lines) and `info` (selection information).
- `linewise`: (optional) If `true`, uses line-wise selection mode.


OPERATOR.CREATE_OPFUNC(FUNC) ~

Creates a raw operator function compatible with Neovimâ€™s `operatorfunc`
option.


LICENSE                                  *operator.nvim-operator.nvim-license*

MIT

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
